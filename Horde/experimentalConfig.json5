{

    ProductName: "Shadow Engine",
    Version: "0.6.2",

    // Extra string appended to version number to help identify and
    // differentiate builds from each other. If not empty, a "-" will be
    // prefixed to the local version, so no need to add it yourself
    LocalVersion: "",

    CC: "gcc",
    CXX: "g++",
    AR: "ar",

    // CC: "clang",
    // CXX: "clang++",
    
    // You can use the following to format this string:
    // {dbg} - Debug or Release
    // {version} - Version number + Local Version
    // {cc} - Compiler name
    // {cxx} - Compiler name
    BuildDir: "shadow-{dbg}-{version}-{cc}",

    Debug: {
        DebugBuild: true,

        IncludeDebugSymbols: true,
        EnableShadowProfiler: true,
        VincesMoreVerboseDebugText: false,
    },

    targets: [
        {
            Name: "bx",
            PrettyName: "BX",
            Type: "StaticLib",
            Language: "C++",
            BaseDir: "../lib/bx",
            Target: "libbx.a",

            std: "c++20",
            Defines: [],
            CXXFLAGS: [
                "-Wall", "-Wextra", "-ffast-math", "-fomit-frame-pointer",
                "-g", "-m64", "-fno-rtti", "-fno-exceptions", "-Wshadow",
                "-mfpmath=sse", "-msse4.2", "-Wunused-value", "-Wundef",
                "-Wlogical-op", "-fPIC" ],

            IfDebug: {
                Defines: [ "BX_CONFIG_DEBUG=1" ],
                CXXFLAGS: []
            },
            IfRelease: {
                Defines: [ "BX_CONFIG_DEBUG=0" ],
                CXXFLAGS: [ '-O3' ]
            },

            IncludeDirs: [ "include", "3rdparty", "include/compat/linux" ],
            Sources: [ "src/*.cpp" ],
            SrcExcludes: [ "src/amalgamated.*" ]
        },
        {
            Name: "bimg",
            PrettyName: "BIMG",
            Type: "StaticLib",
            Language: "C++",
            BaseDir: "../lib/bimg",
            Target: "libbimg.a",

            std: "c++20",
            Defines: [],
            //TODO: Move -g to debug only??
            CXXFLAGS: [
                "-Wall", "-Wextra", "-fomit-frame-pointer", "-g", "-m64",
                "-fno-rtti", "-fno-exceptions", "-Wshadow","-mfpmath=sse",
                "-msse4.2", "-Wunused-value", "-Wundef", "-Wlogical-op",
                "-fPIC" ],

            IfDebug: {
                Defines: [ "BX_CONFIG_DEBUG=1" ],
                CXXFLAGS: []
            },
            IfRelease: {
                Defines: [ "BX_CONFIG_DEBUG=0" ],
                CXXFLAGS: [ '-O3'] 
            },

            IncludeDirs: [
                "include", "3rdparty", "3rdparty/astc-encoder/include",
                "3rdparty/tinyexr/deps/miniz", "3rdparty/iqa/include",
                "../bx/include" ],
            Sources: [ "src/*.cpp", "3rdparty/astc-encoder/source/*.cpp" ],
            SrcExcludes: []
        },
        {
            Name: "bgfx",
            PrettyName: "BGFX",
            Type: "StaticLib",
            Language: "C++",
            BaseDir: "../lib/bgfx",
            Target: "libbgfx.a",

            std: "c++20",
            Defines: [],
            //TODO: Move -g to debug only??
            CXXFLAGS: [
                "-Wall", "-Wextra", "-ffast-math", "-fomit-frame-pointer",
                "-g", "-m64", "-fno-rtti", "-fno-exceptions", "-Wshadow",
                "-mfpmath=sse", "-msse4.2", "-Wunused-value", "-Wundef",
                "-Wlogical-op", "-fPIC" ],

            IfDebug: {
                Defines: [ "BX_CONFIG_DEBUG=1" ],
                CXXFLAGS: []
            },
            IfRelease: {
                Defines: [ "BX_CONFIG_DEBUG=0" ],
                CXXFLAGS: [ '-O3' ]
            },

            IncludeDirs: [
                "include", "3rdparty",
                "../bimg/include", "../bx/include",
                "3rdparty/directx-headers/include/directx",
                "3rdparty/directx-headers/include",
                "3rdparty/directx-headers/include/wsl/stubs",
                "3rdparty/khronos/",
                "../bx/include/compat/linux" ],
            Sources: [ "src/*.cpp" ],
            SrcExcludes: [ "src/amalgamated.*" ]
        },
        {
            Name: "glfw",
            PrettyName: "GLFW",
            Type: "StaticLib",
            Language: "C",
            BaseDir: "../lib/glfw",
            Target: "libglfw.a",

            std: "c99",
            Defines: [ "_DEFAULT_SOURCE", "_GLFW_X11" ],
            CXXFLAGS: [ "-fPIC", "-Wall" ],

            IfDebug: {
                Defines: [],
                CXXFLAGS: [ '-g' ]
            },
            IfRelease: {
                Defines: [],
                CXXFLAGS: ['-O3']
            },

            IncludeDirs: [
                "include", "src" ],
            Sources: [ "src/*.c" ],
            SrcExcludes: []
        },
        {
            Name: "shadow-engine",
            PrettyName: "Shadow Engine",
            Type: "Executable",
            Language: "C++",
            BaseDir: "..",
            Target: "Shadow",

            std: "c++20",
            Defines: [],
            CXXFLAGS: [ "-Wall", "-Wextra", "-ffast-math", "-m64",  ],

            IfDebug: {
                Defines: [ "BX_CONFIG_DEBUG=1", "SHADOW_DEBUG_BUILD" ],
                CXXFLAGS: [ '-g' ]
            },
            IfRelease: {
                Defines: [ "BX_CONFIG_DEBUG=0" ],
                CXXFLAGS: [ '-O3' ]
            },

            IncludeDirs: [
                "include",
                "lib/bgfx/include",
                "lib/bx/include",
                "lib/bimg/include",
                "lib/glfw/include",
                "lib/modernjson",
                "lib/miniaudio",
                "lib/termcolor",
                "lib/snappy/include",
                "lib/leveldb/include",
                "lib/entt",
                "lib/imgui",
                "lib/imgui/backends" ],

            Sources: [
                "src/*.cpp",
                "lib/imgui/imgui.cpp",
                "lib/imgui/imgui_demo.cpp",
                "lib/imgui/imgui_draw.cpp",
                "lib/imgui/imgui_tables.cpp",
                "lib/imgui/imgui_widgets.cpp",
                "lib/imgui/backends/imgui_impl_glfw.cpp",
                "lib/imgui/backends/imgui_impl_vulkan.cpp",
            ],

            // This should and will work in the future, buuuuut... it doesn't
            // right now, and that's fine. I'll fix it later. The reason this
            // doesn't work is because Horde recursively searches for files in
            // the imgui directory, and this causes it to match the file:
            // "lib/imgui/examples/example_win32_directx12/main.cpp"
            // against the wildcard "lib/imgui/*.cpp" even though this isn't the
            // intention of the wildcard.
            // Sources: [
            //     "src/*.cpp", "src/**/*.cpp",
            //     "lib/imgui/*.cpp", "lib/imgui/backends/imgui_impl_glfw.cpp",
            //     "lib/imgui/backends/imgui_impl_vulkan.cpp" ],
            SrcExcludes: [],
            LinkerFlags: [
                "-lstdc++", "-lm", "-lGL", "-lX11", "-ldl", "-lpthread", "-lrt",
                "-lvulkan" ],
            
            // InlineBuildLibs is a list of libraries that will be included in
            // the build of the current target, but they must be built within
            // the current Horde build chain
            InlineBuildLibs: ["bgfx", "bimg", "bx", "glfw"],
            // Libs is just a general list of libraries that will be linked
            Libs: ["../lib/snappy/libsnappy.a", "../lib/leveldb/libleveldb.a"],
        }
    ]

}